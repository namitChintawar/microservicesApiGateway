
	Web App Development:
	====================

	Manual Transaction:
	===================
	solution:
	Online Transaction App: web App : application works over browser
	=========================

	Customer1 --->	Customer2
		  <---
	===========================
	Smarter solution:
			quick,easy,safe,secured,
	Instant Banking: UPI Payments

	FSD : Full Stack Developer
	
		FrontEnd                  	backend
		html css bootstrap      	NodeJS    
		React				Java
						Python
						.Net
						PHP
	==============================================================================
		FreeCharge:
		----------
			Banking
		==============================
		Web App (fast,secued,easy,manageable,scalibilty).....

		Tools:
		=====
			VSCode
			Git
			

		HelloWorld Execution in JS
		==========================
		.txt
		.java
		.zip
	


		-----------------------------
		fileName.js
		Hello.html
		

		Step1: created a new Repo in github
		Step2: Installed Git in windows
		Step3: Created a new folder : exrecise
		Step4: Open GitBash and git init
		Step5: copied all files into repo downlaoded in exercise folder
		Step6: Navigate into repo
		Step6: git status
		Step7: git add .
		Step8: git status
		Step9: git commit -m "my first commit"
		STep10: git push origin main


	==========================================================================================
		NodeJS:
			node --version
			npm --version

		
		Files :
		------
			Syntax to read a file:
						fs.readFile(file_name,encoding,callback_function);

			Syntax to write a file:
						fs.writeFile(file_name,data,options,callback);
<<<<<<< HEAD
=======


			Callback: Function passed as an argument inside another function is called callback;

		JSON Server:
		------------
				It is a Node Module used to create demo REST [Representational State Transfer] JSON webservice.

				npm install -g json-server

				json-server --watch db.json

				CRUD Operations:

				Create
				Read
				Update
				Delete


				POSTMAN


				CaseSTudy : 01-Oct-2022
						-> Execute All samples
						-> Products: CRUD
								Products[name,cost,qty,code...]

				===================================================================================================

				Weekend:
					10 AM TO 5 PM:
					--------------
		
					Session + Lab

					10 AM to 12 AM ---> LAB [Execute All samples]
			
					12:30 PM to 2:30 PM ----> Session
	
					3:00 PM to 5:00 PM ----> LAB [CaseSTudy 2 : Products]

				===================================================================================================
				


>>>>>>> 7bf1a820098750e7ce0e68d81b2add97d5565374


			Callback: Function passed as an argument inside another function is called callback;

		JSON Server:
		------------
				It is a Node Module used to create demo REST [Representational State Transfer] JSON webservice.

				npm install -g json-server

				json-server --watch db.json

				CRUD Operations:

				Create
				Read
				Update
				Delete


				POSTMAN


				CaseSTudy : 01-Oct-2022
						-> Execute All samples
						-> Products: CRUD
								Products[name,cost,qty,code...]

				===================================================================================================

				Weekend:
					10 AM TO 5 PM:
					--------------
		
					Session + Lab

					10 AM to 12 AM ---> LAB [Execute All samples]
			
					12:30 PM to 2:30 PM ----> Session
	
					3:00 PM to 5:00 PM ----> LAB [CaseSTudy 2 : Products]

				===================================================================================================
				
					Data Structures:
					----------------
							A Data Structure is a storage that is used to store and organize data.
						Stack: LIFO : LAST IN FIRST OUT

						Queue:	FIFO
						
						List:	

						Algorithm:
						=========
							set of steps to achieve a goal or task

						 	1. Big O Notation :
										Big O(1) --->  good
										Big O(n!) ---> horrible

							2. Search Algorithm :  Linear Search and Bonary Search.
							3. Sorting Algorithm:	Bubble Sort,Selection Sort etc....


							n * (n - 1)

							3
							  2
						            1 ---> 
								= 6


							Linear Search:
							-------------
								Step 1. Linear Search will accept an array and a target value.
								Step 2. Start searching from the beginning of the array.
								Step 3. check if the value is equals to target:
									-> If so,stop and return values index.
									-> If not.move on to the next element.
								Step 4.	Repeat step3 untill all elements are checked.
										If target not found return -1.


							Binary Search:
							--------------
						Step 1. Start in middle and check if the target is greater or less than middle value.
						Step 2. If the target is greater than the middle value,we will next look at the second half of the array.
						Step 3. If the target is smaller, we look at the first haf of the array.
						Step 4. We pick the middle of that half and  check if its greater or less than our target.
						Step 5. Repeat this process until we find our Target.
									If target not found return -1.


							Sorting:
							=======
								Organising an array of elements into a specific order.
							[4,8,2] ----> SORT ----> [2,4,8]

							Bubble Sort:
							------------
									
							Step1. Start at the beginning of the array
							Step2. Is the adjacent element to the right less? If so ,swap
							step3. Move to next element
							Step4. Repeat steps 2 and 3 util array is sorted.

							[3,2,4,1] ---->   is 3 > 2 => yes : [2,3,4,1]
							[2,3,4,1] ---->   is 3 > 4 => no  : dont swap
							[2,3,4,1] ---->   is 4 > 1 => yes : [2,3,1,4] 

							[2,3,1,4] ---->   is 2 > 3 => no : dont swap
							[2,3,1,4] ---->   is 3 > 1 => yes : [2,1,3.4]
							[2,1,3,4] ---->   4 is the biggest

							[2,1,3,4] ---> is 2 > 1 => yes [1,2,3,4]
							SORTED


							Selection Sort:
							----------------

							Step1: Input Array --> [5,2,4,6,1,3]
							Step2: Start at element1 (5) and set it as the minumum value.
							Step3: compare element1 (5) with elemen2 (2). 2 < 5 ,so set 2 as the new minimum value.
							Step4: Move to element3 (4).
							Step5: 4 < 2? No,move to element4 (6)
							Step6: 6 < 2?  No,move to element5 (1)
							Step7: 1 < 2? Yes,so set 1 as the new minimum
							Step8: Move to element6 (3)
							Step9: 3 < 1? No.
							Step10: we are at end of the array so swap element1 (5) <- our minimum element element5 (1)
								[1,2,4,6,5,3]

							Merge Sort:
							===========
									Merge sort works by decomposing an array into smaller arrays of 0 or 1 items,
							then building up a newly sorted array.

							First we divide the array up until we get arrays of 0 or 1 item		
							
							Unit Testing:
							=============
									Mocha and Chai

								npm init
								npm install mocha chai	
											
							module or component or unit

							actaul value === expected value

	=======================================================================================================================================


		Error and Exceptional Handling:
		-------------------------------
						1) syntax Errors
						2) Logical error
						3) Runtime Error:
								try{

								}catch(){
								}
								finally{
								}
	======================================================================================================================================

		Write a JS to send an email:
		
		from 
		to
		Sub
		Body

=============================================================================================================================================


		Web & Network Fundamentals:
		===========================			
				
			Web:    http or https <----- Internet
			---
				Web App Development
						web service or Rest API

						REST API: Representational State Transfer

						API:
							Application Programing Interface

						Server:   web server
						=======		
							Node provide http Server  ----> localhost:5000
				
		===============================================================================================

			JavaScript:  ------> ECMAScript or ES2015 ---> ES6			
			----------

			1: New ES6 Syntax
			2: Destructuring
			3: ES6 Modules
			4: ES6 Classes
			5: Arrow Functions
			6: Symbol
			7: Iterators & Generators
			8: Promises
			9: ES6 Collections
			10: Array Extensions
			11: Object Extenstions
			12: String Extensions
			


			1. New ES6 syntax:
			-----------------
						JavaScript let: Declaring Block-Scoped Variables
							In ES5 : we declare a variable using var keyword.(scope of the variable is eithrer global or local)
							In ES6 : Provides let keyword.(these variables are blocked-scope).

							Syntax: let variable_name;
			
							

		
			
				
























		
						
